[tool.poetry]
name = "diary-backend"
version = "0.1.0"
description = ""
authors = ["Optimize Success <optimizesuccess4@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.101.1"
uvicorn = { extras = ["standard"], version = "^0.23.2" }
click = "^8.1.7"
pydantic-settings = "^2.0.3"
sqlalchemy = {extras = ["mypy"], version = "^2.0.20"}
asyncpg = "^0.28.0"
greenlet = "^2.0.2"
python-jose = { extras = ["cryptography"], version = "^3.3.0" }
orjson = "^3.9.5"
result = "^0.13.1"
mypy = "^1.5.1"
sentry-sdk = {extras = ["fastapi"], version = "^1.31.0"}


[tool.poetry.group.migration.dependencies]
alembic = "^1.11.3"
psycopg2-binary = "^2.9.7"


[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-randomly = "^3.15.0"
pytest-mypy-plugins = "^3.0.0"
pytest-asyncio = "^0.21.1"
assertpy = "^1.1"
coverage = "^7.3.1"
freezegun = "^1.2.2"
pytest-env = "^1.0.1"
httpx = "^0.25.0"


[tool.poetry.group.lint.dependencies]
black = "^23.9.1"
mypy = "^1.5.1"
pyupgrade = "^3.11.0"
isort = {extras = ["colors"], version = "^5.12.0"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.black]
# https://github.com/psf/black
target-versions = ["py37", "py38", "py39", "py310", "py311"]
line-length = 120
color = true

exclude = '.git'

[tool.isort]
# https://github.com/timothycrosley/isort/
py_version = 311
line_length = 120

known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
profile = "black"
multi_line_output = 3
indent = 4
color_output = true

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin"
]
exclude = [
    "test/.*"
]
python_version = 3.11
pretty = true
show_traceback = true
color_output = true

enable_incomplete_feature = "Unpack"
allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
pythonpath = ["app"]
testpaths = ["test"]
norecursedirs = ["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__", "migration", "docker"]
asyncio_mode = "auto"

env = [
    "ENV=test",
]

# Extra options:
addopts = [
    "--strict-markers",
    "--strict-config",
]


[tool.coverage.run]
branch = true
source = ["app"]

[tool.coverage.report]
skip_empty = true
# Regexes for lines to exclude from consideration
exclude_also = [# Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
